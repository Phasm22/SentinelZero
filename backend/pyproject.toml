[project]
name = "sentinelzero-backend"
version = "1.0.0"
description = "A lightweight, local network scan dashboard for cybersecurity homelabs - Backend API"
readme = "README.md"
license = {text = "ISC"}
authors = [
    {name = "SentinelZero Team"}
]
keywords = ["cybersecurity", "network-scanning", "flask", "nmap", "security-scanner"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: ISC License (ISCL)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking :: Monitoring",
    "Topic :: Security",
]
requires-python = ">=3.12"
dependencies = [
    "apscheduler>=3.10.0",
    "eventlet>=0.40.2",
    "flask>=3.1.1",
    "flask-cors>=6.0.1",
    "flask-migrate>=4.1.0",
    "flask-socketio>=5.5.1",
    "flask-sqlalchemy>=3.1.1",
    "psutil>=7.0.0",
    "python-dotenv>=1.1.1",
    "pytz>=2025.2",
    "requests>=2.32.4",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "flake8>=7.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=70"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".tox"
]

[tool.coverage.run]
source = ["src", "app.py"]
omit = [
    "tests/*",
    ".venv/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError"
]
